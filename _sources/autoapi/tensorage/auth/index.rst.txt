:py:mod:`tensorage.auth`
========================

.. py:module:: tensorage.auth

.. autoapi-nested-parse::

   This module provides authentication and authorization functionality for Supabase.

   It provides a `BackendSession` class for managing backend sessions, as well as utility functions for working with authentication tokens and Supabase connection information.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   tensorage.auth.__get_auth_info
   tensorage.auth.link_to
   tensorage.auth.login
   tensorage.auth.signup



Attributes
~~~~~~~~~~

.. autoapisummary::

   tensorage.auth.SUPA_FILE


.. py:data:: SUPA_FILE

   

.. py:function:: __get_auth_info(backend_url: Optional[str], backend_key: Optional[str] = None, email: Optional[str] = None, password: Optional[str] = None) -> Tuple[str, str, str, str]

   Get the Supabase connection information.

   This function returns the Supabase connection information as a tuple of the backend URL and backend key. If the connection information is not provided as arguments, it is read from the `.supabase.env` file or from environment variables.

   :param backend_url: The URL of the Supabase backend.
   :param backend_key: The API key for the Supabase backend.
   :param email: The email address of the user to log in.
   :param password: The password of the user to log in.
   :return: A tuple of the backend URL and backend key.


.. py:function:: link_to(backend_url: str, backend_key: str) -> typing_extensions.Literal[True]
                 link_to(backend_url: str, backend_key: str, password: str, email: str) -> tensorage.store.TensorStore

   Link to a Supabase backend using the provided backend URL and key.

   If a password and email are provided, logs in to the backend using the provided credentials.

   :param backend_url: The URL of the Supabase backend to link to.
   :type backend_url: str
   :param backend_key: The key of the Supabase backend to link to.
   :type backend_key: str
   :param password: The password to use for logging in to the backend. Defaults to None.
   :type password: Optional[str]
   :param email: The email to use for logging in to the backend. Defaults to None.
   :type email: Optional[str]

   :returns: If no credentials are provided, returns True. If credentials are provided, returns a TensorStore object representing the linked backend.
   :rtype: Union[True, TensorStore]

   :raises ValueError: If the backend URL or key are not provided.
   :raises AuthenticationError: If the provided credentials are invalid.


.. py:function:: login(email: Optional[str] = None, password: Optional[str] = None, backend_url: Optional[str] = None, backend_key: Optional[str] = None) -> tensorage.store.TensorStore

   Log in to the Supabase backend using email and password authentication.

   This function creates a `BackendSession` object using the provided backend URL and key, or the default values if none are provided. It then logs in to the backend session using the provided email and password. If the login is successful, it returns the tensor store instance for the backend session.

   :param email: The email address of the user to log in.
   :param password: The password of the user to log in.
   :param backend_url: The URL of the Supabase backend. Defaults to `None`.
   :param backend_key: The API key for the Supabase backend. Defaults to `None`.
   :return: The tensor store instance for the backend session.
   :raises RuntimeError: If the login fails.


.. py:function:: signup(email: str, password: str, backend_url: Optional[str] = None, backend_key: Optional[str] = None) -> gotrue.types.AuthResponse

   Sign up a new user to the Supabase backend using email and password authentication.

   This function creates a `BackendSession` object using the provided backend URL and key, or the default values if none are provided. It then signs up a new user to the backend session using the provided email and password. If the signup is successful, it returns an `AuthResponse` object containing the user's access token and refresh token.

   :param email: The email address of the user to sign up.
   :param password: The password of the user to sign up.
   :param backend_url: The URL of the Supabase backend. Defaults to `None`.
   :param backend_key: The API key for the Supabase backend. Defaults to `None`.
   :return: An `AuthResponse` object containing the user's access token and refresh token.
   :raises RuntimeError: If the signup fails.


