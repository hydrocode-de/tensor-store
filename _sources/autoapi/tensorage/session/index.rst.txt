:py:mod:`tensorage.session`
===========================

.. py:module:: tensorage.session

.. autoapi-nested-parse::

   This module provides the `BackendSession` class, which is used to manage the
   backend session for the application.

   The `BackendSession` class provides methods for logging in and out of the backend,
   as well as for accessing the various backend contexts (database, storage, etc.).
   It also provides a context manager (`ContextWrapper`) for managing the
   lifetime of backend contexts.

   .. rubric:: Example

   .. code-block:: python

       session = BackendSession()
       with session.database() as db:
           db.insert_dataset(key='test', shape=[1, 2, 3], dim=3)



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   tensorage.session.ContextWrapper
   tensorage.session.BackendSession




Attributes
~~~~~~~~~~

.. autoapisummary::

   tensorage.session.C


.. py:data:: C

   

.. py:class:: ContextWrapper


   Bases: :py:obj:`Generic`\ [\ :py:obj:`C`\ ]

   A context manager for managing the lifetime of backend contexts.

   The `ContextWrapper` class is a generic context manager that takes a
   backend context class as a type parameter. It provides a `__enter__` method
   that logs in the backend session if it is not already logged in,
   and instantiates the backend context with an authenticated session.
   It also provides a `__exit__` method that logs out the backend session.

   .. rubric:: Example

   .. code-block:: python

       session = BackendSession()
       with ContextWrapper(session, DatabaseContext) as db:
           db.insert_dataset(key='test', shape=[1, 2, 3], dim=3)

   .. py:attribute:: _session
      :type: BackendSession

      

   .. py:attribute:: Context
      :type: Type[C]

      

   .. py:method:: __enter__() -> C

      Enter the context manager and return the backend context instance.

      If the backend session is not already logged in, this method logs
      in the session using the `login_by_mail` method of the `BackendSession`
      instance. It then instantiates the backend context with an authenticated
      session, and returns the context instance.

      .. rubric:: Example

      .. code-block:: python

          session = BackendSession()
          with ContextWrapper(session, DatabaseContext) as db:
              db.insert_dataset(key='test', shape=[1, 2, 3], dim=3)

      :return: The backend context instance.


   .. py:method:: __exit__(*args)

      Exit the context manager and log out the backend session.

      This method logs out the backend session using the `logout` method of the `BackendSession` instance.

      .. rubric:: Example

      .. code-block:: python

          session = BackendSession()
          with ContextWrapper(session, DatabaseContext) as db:
              db.insert_dataset(key='test', shape=[1, 2, 3], dim=3)

      :param args: The exception type, value, and traceback (if any).



.. py:class:: BackendSession


   Bases: :py:obj:`object`

   A class for managing the backend session for the application.

   The `BackendSession` class provides methods for logging in and out of the backend,
   as well as for accessing the various backend contexts (database, storage, etc.).
   It also provides a context manager (`ContextWrapper`) for managing the lifetime of backend contexts.

   .. rubric:: Example

   .. code-block:: python

       session = BackendSession()
       session.login_by_mail('user@example.com', 'password')
       with session.database() as db:
           db.insert_dataset(key='test', shape=[1, 2, 3], dim=3)

   :ivar client: The backend client instance.
   :ivar token: The authentication token for the backend session.

   .. py:property:: client
      :type: supabase.Client

      Get the backend client instance.

      If the client instance has not been created yet, this method creates it using the `Client` class from the `postgrest` module. It then sets the `Authorization` header of the client instance to the authentication token for the backend session.

      .. rubric:: Example

      .. code-block:: python

          session = BackendSession()
          session.login_by_mail('user@example.com', 'password')
          client = session.client()
          response = client.table('datasets').select('*').execute()

      :return: The backend client instance.

   .. py:attribute:: email
      :type: str

      

   .. py:attribute:: password
      :type: str

      

   .. py:attribute:: backend_url
      :type: str

      

   .. py:attribute:: backend_key
      :type: str

      

   .. py:attribute:: _client
      :type: supabase.Client

      

   .. py:attribute:: _user
      :type: gotrue.types.User

      

   .. py:attribute:: _session
      :type: gotrue.types.Session

      

   .. py:method:: login_by_mail(email: str, password: str) -> gotrue.types.AuthResponse

      Log in to the backend using email and password.

      This method logs in to the backend using the `auth.sign_in` method of the `supabase.Client` instance.
      It takes an email and password as arguments, and returns an `AuthResponse` object
      containing the authentication token and user information.

      .. rubric:: Example

      .. code-block:: python

          session = BackendSession()
          response = session.login_by_mail('user@example.com', 'password')
          print(response)

      :param email: The email address of the user.
      :param password: The password of the user.
      :return: An `AuthResponse` object containing the authentication token and user information.


   .. py:method:: register_by_mail(email: str, password: str) -> gotrue.types.AuthResponse

      Register a new user account using email and password.

      This method registers a new user account using the `auth.sign_up` method of the `supabase.Client` instance.
      It takes an email and password as arguments, and returns an `AuthResponse` object containing the
      authentication token and user information.

      .. rubric:: Example

      .. code-block:: python

          session = BackendSession()
          response = session.register_by_mail('user@example.com', 'password')
          print(response)

      :param email: The email address of the user.
      :param password: The password of the user.
      :return: An `AuthResponse` object containing the authentication token and user information.


   .. py:method:: refresh() -> gotrue.types.AuthResponse

      Refresh the authentication token for the backend session.

      This method refreshes the authentication token for the backend session using the `auth.refresh_access_token` method of the `supabase.Client` instance. It returns an `AuthResponse` object containing the new authentication token and user information.

      .. rubric:: Example

      .. code-block:: python

          session = BackendSession()
          session.login_by_mail('user@example.com', 'password')
          response = session.refresh()
          print(response)

      :return: An `AuthResponse` object containing the new authentication token and user information.


   .. py:method:: logout()

      Log out of the backend session.

      This method logs out of the backend session using the `auth.sign_out` method of the `supabase.Client` instance.

      .. rubric:: Example

      .. code-block:: python

          session = BackendSession()
          session.login_by_mail('user@example.com', 'password')
          session.logout()


   .. py:method:: database() -> ContextWrapper[tensorage.backend.database.DatabaseContext]

      Get a context manager for the database context.

      This method returns a context manager (`ContextWrapper`) for the database context (`DatabaseContext`).
      The context manager handles the lifetime of the database context, including logging in and out of
      the backend session.

      .. rubric:: Example

      .. code-block:: python

          session = BackendSession()
          with session.database() as db:
              db.insert_dataset(key='test', shape=[1, 2, 3], dim=3)

      :return: A context manager for the database context.


   .. py:method:: storage() -> ContextWrapper[tensorage.backend.storage.StorageContext]

      Get a context manager for the storage context.

      This method returns a context manager (`ContextWrapper`) for the storage context (`StorageContext`).
      The context manager handles the lifetime of the storage context, including logging in and out
      of the backend session.

      .. rubric:: Example

      .. code-block:: python

          session = BackendSession()
          with session.storage() as storage:
              storage.upload_file('test.txt', 'Hello, world!')

      :return: A context manager for the storage context.


   .. py:method:: __del__()

      Clean up the backend session when the object is deleted.

      This method logs out of the backend session and cleans up any resources associated
      with the session when the `BackendSession` object is deleted.

      .. rubric:: Example

      .. code-block:: python

          session = BackendSession()
          session.login_by_mail('user@example.com', 'password')
          del session


   .. py:method:: __call__() -> tensorage.store.TensorStore

      Get the tensor store instance for the backend session.

      If the tensor store instance has not been created yet, this method creates it using the
      `TensorStore` class from the `tensorstore` module. It then sets the `Authorization`
      header of the tensor store instance to the authentication token for the backend session.

      .. rubric:: Example

      .. code-block:: python

          session = BackendSession()
          session.login_by_mail('user@example.com', 'password')
          store = session()
          array = np.array([[1, 2], [3, 4]])
          store['test'] = array

      :return: The tensor store instance for the backend session.



